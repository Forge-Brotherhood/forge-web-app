// -----------------------------
// Prisma Schema ‚Äì Forge (Unified Threads)
// -----------------------------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------

enum GroupType {
  circle
  core
}

enum ThreadStatus {
  open
  answered
  archived
}

enum PostKind {
  request       // initial ask that seeds the thread
  update        // progress update
  testimony     // fulfilled / praise report
  encouragement // short notes, prayers, ‚Äústanding with you‚Äù
  verse         // scripture card post
  system        // system cards/prompts
}

enum MediaType {
  image
  video
  audio
}

enum ReactionType {
  amen
  emoji
  verse_ref // lightweight ‚ÄúI dropped a verse ref here‚Äù
}

enum BanState {
  active
  banned
}

enum UploadStatus {
  uploading
  processing
  ready
  error
}

// ---------- Core ----------

model User {
  id              String    @id @default(uuid())
  clerkId         String    @unique
  email           String    @unique
  firstName       String?
  lastName        String?
  displayName     String?
  handle          String?
  role            String    @default("user")
  banState        BanState  @default(active)
  profileImageUrl String?
  voiceIntroUrl   String?
  prayerStreak    Int       @default(0)
  lastPrayerAt    DateTime?
  isSponsor       Boolean   @default(false)

  memberships     GroupMember[]
  threads         Thread[]       @relation("ThreadAuthor")
  posts           Post[]         @relation("PostAuthor")
  reactions       Reaction[]
  prayerActions   PrayerAction[]
  prayerListItems PrayerListItem[]
  sponsorships    Sponsorship[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deletedAt       DateTime?
}

model Group {
  id          String     @id @default(uuid())
  name        String?
  description String?
  groupType   GroupType  @default(circle)

  members     GroupMember[]
  threads     Thread[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  @@index([groupType])
}

model GroupMember {
  groupId  String
  userId   String
  status   String    @default("active") // active|pending|left
  role     String    @default("member") // member|leader
  joinedAt DateTime  @default(now())

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([groupId, userId])
  @@index([userId])
}

// ---------- Conversation Layer ----------

model Thread {
  id                String        @id @default(uuid())
  groupId           String?       // optional for community-only posts
  authorId          String        // creator of the thread (often the requester)
  title             String?       // optional; most content lives in posts
  sharedToCommunity Boolean       @default(false)
  isAnonymous       Boolean       @default(false)
  status            ThreadStatus  @default(open)

  group   Group?  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  author  User    @relation("ThreadAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  posts   Post[]
  prayers PrayerAction[] // "acts of praying" on this thread
  prayerListItems PrayerListItem[] // items saved to prayer lists

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@index([groupId, status, createdAt])
  @@index([sharedToCommunity, status, createdAt])
  @@index([authorId, createdAt])
}

model Post {
  id        String   @id @default(uuid())
  threadId  String
  authorId  String?  // system posts may have null author
  kind      PostKind @default(request)
  content   String?

  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  author User?  @relation("PostAuthor", fields: [authorId], references: [id])
  media  Media[]
  reactions Reaction[]

  // üîß Added opposite relation for PrayerAction
  prayerActions PrayerAction[]
  prayerListItems PrayerListItem[] // items saved to prayer lists

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([threadId, kind, createdAt])
  @@index([authorId, createdAt])
}

model Media {
  id           String       @id @default(uuid())
  postId       String?      // Nullable to allow orphaned records during upload
  type         MediaType
  url          String
  width        Int?
  height       Int?
  durationS    Int?         // for audio/video
  muxAssetId   String?      // MUX asset identifier
  muxPlaybackId String?     // MUX playback identifier
  uploadStatus UploadStatus @default(ready) // upload/processing status

  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([postId])
  @@index([muxAssetId])
  @@index([url]) // Add index for webhook lookups by upload ID
}

model Reaction {
  id        String       @id @default(uuid())
  postId    String
  userId    String
  type      ReactionType
  payload   String?

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([postId])
  @@index([userId, createdAt])
  @@unique([postId, userId, type, payload])
}

// ---------- Ritual / Analytics ----------

model PrayerAction {
  id       String   @id @default(uuid())
  userId   String
  threadId String
  postId   String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  post   Post?  @relation(fields: [postId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())

  @@index([userId, createdAt])
  @@index([threadId, createdAt])
  @@index([postId])
}

// ---------- Prayer List ----------

model PrayerListItem {
  id        String   @id @default(uuid())
  userId    String
  threadId  String
  postId    String?  // Optional specific post
  
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  post   Post?  @relation(fields: [postId], references: [id], onDelete: SetNull)
  
  createdAt DateTime @default(now())
  
  @@unique([userId, threadId, postId])
  @@index([userId, createdAt])
  @@index([threadId])
  @@index([userId, threadId])
}

// ---------- Stewardship ----------

model Sponsorship {
  id        String   @id @default(uuid())
  userId    String
  amount    Decimal
  active    Boolean  @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, active])
}